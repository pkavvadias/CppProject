#include <string>
#include "ReservationHeader.h"
#include "RoomHeader.h"


typedef basic_string < char > string;

Reservation* Availability[30]{0};

//Initial value of Room ID static int is set to 100, because this is usual hotel practice
int Room::RoomId = 100;
Room::Room() {
	RoomNumber = RoomId;
	RoomId++;
	for(int i=0;i<31;i++)
	{
		Availability[i] = nullptr;
	}
}
int Room::getRoomNumber() {
	return RoomNumber;
}
void Room::setMaxCapacity(int i) {
	MaxCapacity = i;
}
int Room::getMaxCapacity() {
	return MaxCapacity;
}
void Room::setPricePerPerson(double i) {
	PricePerPerson = i;
}
double Room::getPricePerPerson() {
	return PricePerPerson;
}
Reservation* Room::getAvailabilityI(int n) {
	return Availability[n];
}
void Room::setAvailabilityI(int n, Reservation* res) {
	Availability[n] = res;
}
/* addReservation checks if room is available for every day that was requested and if
** the requested number of occupants is less than or equivalent to the maximum capacity of the room.
** If all conditions are met, Availability array is updated with the reservation, the reservation
** is updated with the room, and boolean value true is returned to confirm that the reservation
** was added successfully. Else, boolean value false is returned and no reservation is added.*/
bool Room::addReservation(Reservation* res) {
	
		bool a = true;
		for (int i = res->getArrival(); i < (res->getArrival() + res->getDaysOfStay()); i++) {
			if (Availability[i] == nullptr && res->getNumberOfPeople() <= MaxCapacity) {
				Availability[i] = res;
				Availability[i]->setReservationNumber(res->getReservationNumber());
				res->setRoom(this);
				a = true;
			}
			else {
				a = false;
			}
		}
		return a;
	
	}

/* costCalculate calculates the daily income generated by the room for each day of the month,
** and then adds all daily room incomes to calculate the monthly income generated by the room.
** Finally, the monthly income is returned.*/
double Room::costCalculate() {
	double cost = 0;
	for (int i = 0; i<30; i++) {
		if (Availability[i] != nullptr) {
			cost += (Availability[i]->getNumberOfPeople()*PricePerPerson);
		}
	}
	return cost;
}
/* cancel(int) checks if the ID of a certain reservation matches that of a reservation stored in
** Availability. If the IDs match, the 'cell' of the array is set to hold a null pointer,
** effectively cancelling the reservation. Boolean value true is always returned.*/
bool Room::cancel(int ReservationId) {
	for (int i = 0; i<30; i++) {
		if (Availability[i] != nullptr) {
			if (Availability[i]->getReservationNumber() == ReservationId) {
				Availability[i] = nullptr;
			}
		}
	}
	return true;
}
/* occupiedPercentage counts for how many days of this month the room is reserved,
** and subsequently calculates and returns the percentage of reserved days for this month.*/
float Room::occupiedPercentage() {
	float percentage;
	float counter = 0;
	for (int i = 0; i<30; i++) {
		if (Availability[i] != nullptr) {
			counter++;
		}
	}
	percentage = (counter / 30) * 100;
	return percentage;
}
